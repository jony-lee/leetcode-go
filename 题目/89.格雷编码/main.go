package main

import "fmt"

/*
【题目】
格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。

给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。

示例 1:

输入: 2
输出: [0,1,3,2]
解释:
00 - 0
01 - 1
11 - 3
10 - 2

对于给定的 n，其格雷编码序列并不唯一。
例如，[0,2,3,1] 也是一个有效的格雷编码序列。

00 - 0
10 - 2
11 - 3
01 - 1
示例 2:

输入: 0
输出: [0]
解释: 我们定义格雷编码序列必须以 0 开头。
     给定编码总位数为 n 的格雷编码序列，其长度为 2n。当 n = 0 时，长度为 20 = 1。
     因此，当 n = 0 时，其格雷编码序列为 [0]。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/gray-code
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

【思路】
//TODO
抓住格雷码的核心，两个连续的数值仅有一个位数的差异。
一个位数的差异代表什么呢，如果我们将两个连续的数值进行异或的话，看二进制码中仅有一位是1，其余均是0
根据这一特征，我们现在构造格雷码
格雷码第一个是0000，不论是多少位均初始化为0
https://blog.csdn.net/w8253497062015/article/details/80896500
https://wenku.baidu.com/view/340671ef69dc5022abea005e.html
参考了以上博客的第二种解法，非常简洁，但需要了解其中的原理

*/

//【代码】
func grayCode(n int) []int {
	ret := make([]int, 1<<uint(n))
	for i := 0; i < len(ret); i++ {
		ret[i] = i ^ (i >> 1) //这是8421码到格雷码的一个转换规律
		// 将8421码右移一位然后与自己做异或，就得到了这个8421码对应的一种格雷码
	}
	return ret
}

//【主函数】
func main() {
	n := 5
	fmt.Println(grayCode(n))
}

/*
【总结】：
同样算是一道找规律的题目，但是规律不太好找，有的人通过观察出各个格雷码之间的对称规律通过一些构造的方法来
实际上有点曲线救国的意思，我认为最优雅的方式还是利用本身的异或来实现格雷码的转换
另：格雷码每次进位上只需要改变一位，因此在通信领域应用广泛，降低信息传递的出错率。


*/
