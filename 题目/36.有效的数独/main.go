package main

//【题目】
/*
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。


上图是一个部分填充的有效的数独。

数独部分空格内已填入了数字，空白格用 '.' 表示。

示例 1:

输入:
[
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: true
示例 2:

输入:
[
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/valid-sudoku
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/
//
//【思路】
/*
最初想的是创建27个字典数组，结果创建失败，数组是固定内存大小的，数组中的字典无法添加元素
然后找了下资料，发现可以直接创建如下二维数组，由于这里每个字典里的元素只有9个，因此直接用数组代替字典
然后将对应数按特定映射放进数组中





*/

//【代码】
func isValidSudoku(board [][]byte) bool {
	var row [9][9]bool
	var cow [9][9]bool
	var block [9][9]bool
	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {

			if board[i][j] == '.' {
				continue
			}
			var index = i/3*3 + j/3     //block的索引
			var tmp = board[i][j] - '1' //字符映射

			if row[i][tmp] || cow[j][tmp] || block[index][tmp] {
				return false
			}

			row[i][tmp] = true
			cow[j][tmp] = true
			block[index][tmp] = true

		}

	}
	return true
}

//【主函数】
func main() {

}

//【总结】：
/*







 */
